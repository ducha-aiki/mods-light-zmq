[Computing]
LoadColor=1;
numberOfCores=-1; how many cores to use. -1 for maximum possible
[AffineAdaptation]
useTS=1
[AffNet]
path_to_model=AffNetJIT.pt
mrSize=5.1962;
batchSize=128;
patchSize=32;  width and height of the patch
onGPU=true
[DominantOrientation]
;patch size and mrSize here are use if useTS=false. If useTS=1, ones from [OriNet] are used
mrSize = 5.1962; = 3.0f*sqrt(3.0f). size of the measurement region (as multiple of the feature scale) for orientation estimation.
patchSize = 32;  width and height of the patch
maxAngles = 1
threshold = 0.8; fraction of max peak to add peak
addUpright=false
halfSIFTMode=false;
useTS=1
addMirrored=false
[OriNet]
path_to_model=OriNetJIT.pt
mrSize=5.1962;
batchSize=128;
patchSize=32;  width and height of the patch
onGPU=true
[TorchScript]
path_to_model=HardNetLib+JIT.pt
mrSize=5.1962;
batchSize=256;
patchSize=32;  width and height of the patch
onGPU=true
[MSER] ;CMP implementation
max_area=0.05; maximum area of the MSER to the image area
min_size=30 ; minimum region size (in pixels)
min_margin=8; threshold
mode=FixedTh;RegNumber;can be "FixedTh", "FixedRegNumber", "RelativeTh", RelativeRegNumber 
;relativeThreshold=0.0001;
regionsNumber = 500;
;relativeRegionsNumber = 0.2;
[HessianAffine];CMP implementation
mode=FixedTh; "FixedRegNumber", "RelativeTh", RelativeRegNumber, NotLessThanRegions 
threshold=5.33;18.0;5.333; = 16.0f/3.0f // noise dependent threshold on the response (sensitivity)
;relativeThreshold=0.1;
regionsNumber=3000;
;relativeRegionsNumber = 0.5;
max_iter = 16; number of affine shape interations
numberOfScales= 3; number of scale per octave
initialSigma = 1.6; amount of smoothing applied to the initial level of first octave
edgeEigenValueRatio = 10.0; ratio of the eigenvalues
border = 5; number of pixels ignored at the border of image
smmWindowSize = 19; // width and height of the SMM mask, pixels
convergenceThreshold=0.05; //for Baumberg iteration
doBaumberg=0; Mean "do internal affine shape adaptation. If you want to use external, set AffineAdaptation=0 here and useTS=1 in [AffineAdaptation].
sampleFromImage=0
method=SMM
[HarrisAffine];CMP implementation
mode=FixedTh;NotLessThanRegions;FixedRegNumber;can be "FixedTh", "FixedRegNumber", "RelativeTh", RelativeRegNumber 
threshold = 15.0; = 16.0f/3.0f // noise dependent threshold on the response (sensitivity)
relativeThreshold=0.1;
regionsNumber = 1000;
relativeRegionsNumber = 0.5;
max_iter = 16; number of affine shape interations
numberOfScales= 3; number of scale per octave
initialSigma = 1.6; amount of smoothing applied to the initial level of first octave
edgeEigenValueRatio = 10.0; ratio of the eigenvalues
border = 5; number of pixels ignored at the border of image
smmWindowSize = 19; // width and height of the SMM mask, pixels
convergenceThreshold=0.1; //for Baumberg iteration
HarrisCoef = 0.04;
doBaumberg=0; Mean "do internal affine shape adaptation. If you want to use external, set AffineAdaptation=0 here and useTS=1 in [AffineAdaptation].
[DoG];CMP implementation
mode=FixedTh;RegNumber; can be "FixedTh", "FixedRegNumber", "RelativeTh", RelativeRegNumber 
threshold = 8.0; = 16.0f/3.0f // noise dependent threshold on the response (sensitivity)
relativeThreshold=0.01;
regionsNumber = 3000;
relativeRegionsNumber = 0.5;
numberOfScales = 3; number of scale per octave
initialSigma = 1.6; amount of smoothing applied to the initial level of first octave
edgeEigenValueRatio =10.0; ratio of the eigenvalues
border = 5; number of pixels ignored at the border of image
max_iter = 32; number of affine shape interations
border = 5; number of pixels ignored at the border of image
convergenceThreshold=0.05; //for Baumberg iteration
smmWindowSize = 19; // width and height of the SMM mask, pixels
doBaumberg=0; Mean "do internal affine shape adaptation. If you want to use external, set AffineAdaptation=0 here and useTS=1 in [AffineAdaptation].
[SIFTDescriptor] ;CMP implementation
photoNorm=true
FastPatchExtraction=false
spatialBins = 4;  width and height bins 
orientationBins = 8;
maxBinValue = 0.2;0.2; 
patchSize = 41;  width and height of the patch
mrSize = 5.1962 ; = 3.0f*sqrt(3.0f). size of the measurement region (as multiple of the feature scale) for SIFT computation
[Matching]; FLANN from OpenCV
binary_matcher=linear; Can be linear, lsh, hierarchical.
vector_matcher=kdtree;kdtree;Can be linear, kdtree,composite, kmeans
binary_dist=Hamming; Can be Hamming
vector_dist=L2;Can be L1,L2
doBothRANSACgroundTruth = 1; only when used ground truth mode
RANSACforStopping = 1; only when used ground truth mode and doBothRANSACgroundTruth =1
contradDist = 10.0;10.0; in pixels
checkFwithPTS = 0
kd_trees=4;
knn_checks=128;
[DuplicateFiltering]
doBeforeRANSAC = 1	;if == 0, tend to degenerated cases faster but a bit less true mathces
duplicateDist = 2.0	;in pixels
whichCorrespondenceRemains=bestFGINN;can random, bestFGINN, bestDistance, biggerRegion
[RANSAC] ;CMP implementation
err_threshold = 4.0;in pixels.
ErrorType=Sampson; Can be Sampson,SymmSum.
doSymmCheck = 1;
confidence = 0.99
max_samples = 1000000
localOptimization = 1
LAFcoef=2.0; LAFcoef*err_threshold = threshold for LAF-F-check. Use 0 to switch check off 
HLAFcoef=12.0; LAFcoef*err_threshold = threshold for Symmetrical LAF-H-check. Use 0 to switch check off 
;Symmetrical error >= 2* Sampson error, also LAF can be not precisely equal. 12 is recommended
[ImageOutput]
writeImages = 1
drawOnlyCenters = 0; if 0, all matches ellipses with orientations will be shown. 
drawEpipolarLines = 0; in F-mode only. 
drawReprojected = 0;0 == ASIFT-like output
[TextOutput]
verbose=1;
timeLog= 1;
featureComplemetaryLog = 0;
writeKeypoints = 1;
writeMatches = 0;
outputAllTentatives=0;
outputEstimatedHorF=0;
outputMikFormat=1; 1 means x y a b c desc[], 0 means x y s a11 a12 a21 a22 desc[]
